# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: npm
        id: install-npm
        run: npm i
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Prepare Deployment
        run: |
          mkdir -p deploy
          cp -r .next/server/pages/* deploy/
          mkdir -p deploy/_next/static/
          cp -r .next/static/* deploy/_next/static/
          cp .next/server/pages/en.html deploy/index.html
      - name: API Endpoints
        run: |
          mkdir -p deploy/api/
          BUILD_ID=$(cat .next/BUILD_ID)
          echo "$BUILD_ID" > deploy/api/build-id
          echo "$BUILD_ID" > deploy/api/build-id.txt
          echo "{\"BUILD_ID\": \"$BUILD_ID\"}" > deploy/api/build-id.json
          cp .next/build-manifest.json deploy/api/build-manifest
          cp .next/build-manifest.json deploy/api/build-manifest.json
          cp .next/build-manifest.json deploy/api/build-manifest.txt
      - name: Modify Deployment
        run: |
          mkdir -p deploy/_just/
          FILE_ID=1
          echo ""
          echo "----------------"
          echo ""
          echo "_just Chunks:"
          echo ""
          for file in _just/js/*; do
            cp "$file" "deploy/_just/${FILE_ID}.js"
            echo "_just/${FILE_ID}.js"
            FILE_ID=$((FILE_ID + 1))
          done
          FILE_ID=1
          for file in _just/style/*; do
            cp "$file" "deploy/_just/${FILE_ID}.css"
            echo "_just/${FILE_ID}.css"
            FILE_ID=$((FILE_ID + 1))
          done
          echo ""
          echo "End _just Chunks"
          echo ""
          echo "----------------"
      - name: Override Deployment
        run: |
          for html_file in deploy/*.html; do
            for js_file in deploy/_just/*.js; do
              echo "<script src=\"_just/$(basename "$js_file")\"></script>" >> "$html_file"
            done
            for css_file in deploy/_just/*.css; do
              echo "<link href=\"_just/$(basename "$css_file")\" rel=\"stylesheet\">" >> "$html_file"
            done
            sed -i '/<\/head>/i\ '"$(cat \"$html_file\")" "$html_file"
          done
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: deploy

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
